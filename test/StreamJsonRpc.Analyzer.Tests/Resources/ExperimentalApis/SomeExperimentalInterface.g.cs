// <auto-generated/>

#nullable enable
#pragma warning disable CS0436 // prefer local types to imported ones
#pragma warning disable // Disable all warnings so that [Experimental] APIs don't flag anything.

[global::StreamJsonRpc.Reflection.JsonRpcProxyMappingAttribute(typeof(StreamJsonRpc.Generated.SomeExperimentalInterface_Proxy))]
partial interface SomeExperimentalInterface
{
}

namespace StreamJsonRpc.Generated
{
	
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "x.x.x.x")]
	internal class SomeExperimentalInterface_Proxy : global::StreamJsonRpc.Reflection.ProxyBase
		, global::SomeExperimentalInterface
	{
		
		private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> AddAsyncNamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
			["a"] = typeof(int),
			["t"] = typeof(global::CustomType),
		};
		
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> AddAsyncPositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
		{
			typeof(int),
			typeof(global::CustomType),
		};
		
		private string? transformedAddAsync1;
		
		public SomeExperimentalInterface_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.Reflection.ProxyInputs inputs)
		    : base(client, inputs)
		{
		}
		
		global::System.Threading.Tasks.Task<int> global::SomeExperimentalInterface.AddAsync(int a, global::CustomType t, global::System.Threading.CancellationToken token)
		{
			if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
			
			this.OnCallingMethod("AddAsync");
			string rpcMethodName = this.transformedAddAsync1 ??= this.TransformMethodName("AddAsync", typeof(global::SomeExperimentalInterface));
			global::System.Threading.Tasks.Task<int> result = this.Options.ServerRequiresNamedArguments ?
			    this.JsonRpc.InvokeWithParameterObjectAsync<int>(rpcMethodName, ConstructNamedArgs(), AddAsyncNamedArgumentDeclaredTypes1, token) :
			    this.JsonRpc.InvokeWithCancellationAsync<int>(rpcMethodName, [a, t], AddAsyncPositionalArgumentDeclaredTypes1, token);
			this.OnCalledMethod("AddAsync");
			
			return result;
			
			global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
			    => new()
			    {
					["a"] = a,
					["t"] = t,
				};
		}
	}
}
