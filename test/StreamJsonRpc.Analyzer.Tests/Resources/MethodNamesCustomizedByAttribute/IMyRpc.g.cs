// <auto-generated/>

#nullable enable
#pragma warning disable CS0436 // prefer local types to imported ones

[global::StreamJsonRpc.Reflection.JsonRpcProxyMappingAttribute(typeof(StreamJsonRpc.Generated.IMyRpc_Proxy))]
partial interface IMyRpc
{
}

namespace StreamJsonRpc.Generated
{
	
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "x.x.x.x")]
	internal class IMyRpc_Proxy : global::StreamJsonRpc.Reflection.ProxyBase
		, global::IMyRpc
	{
		
		private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> AddAsyncNamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
			["a"] = typeof(int),
			["b"] = typeof(int),
		};
		
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> AddAsyncPositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
		{
			typeof(int),
			typeof(int),
		};
		
		private string? transformedAddAsync1;
		
		private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> IntegrateAsyncNamedArgumentDeclaredTypes2 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
			["from"] = typeof(double),
			["to"] = typeof(double),
		};
		
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> IntegrateAsyncPositionalArgumentDeclaredTypes2 = new global::System.Collections.Generic.List<global::System.Type>
		{
			typeof(double),
			typeof(double),
		};
		
		private string? transformedIntegrateAsync2;
		
		private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> DivideAsyncNamedArgumentDeclaredTypes3 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
			["from"] = typeof(double),
			["to"] = typeof(double),
		};
		
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> DivideAsyncPositionalArgumentDeclaredTypes3 = new global::System.Collections.Generic.List<global::System.Type>
		{
			typeof(double),
			typeof(double),
		};
		
		private string? transformedDivideAsync3;
		
		public IMyRpc_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.Reflection.ProxyInputs inputs)
		    : base(client, inputs)
		{
		}
		
		global::System.Threading.Tasks.Task global::IMyRpc.AddAsync(int a, int b, global::System.Threading.CancellationToken cancellationToken)
		{
			if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
			
			this.OnCallingMethod("AddAsync");
			string rpcMethodName = this.transformedAddAsync1 ??= this.TransformMethodName("AddRenamed", typeof(global::IMyRpc));
			global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
			    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), AddAsyncNamedArgumentDeclaredTypes1, cancellationToken) :
			    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [a, b], AddAsyncPositionalArgumentDeclaredTypes1, cancellationToken);
			this.OnCalledMethod("AddAsync");
			
			return result;
			
			global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
			    => new()
			    {
					["a"] = a,
					["b"] = b,
				};
		}
		
		global::System.Threading.Tasks.Task global::IMyRpc.IntegrateAsync(double from, double to, global::System.Threading.CancellationToken cancellationToken)
		{
			if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
			
			this.OnCallingMethod("IntegrateAsync");
			string rpcMethodName = this.transformedIntegrateAsync2 ??= this.TransformMethodName("IntegrateRenamed", typeof(global::IMyRpc));
			global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
			    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), IntegrateAsyncNamedArgumentDeclaredTypes2, cancellationToken) :
			    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [from, to], IntegrateAsyncPositionalArgumentDeclaredTypes2, cancellationToken);
			this.OnCalledMethod("IntegrateAsync");
			
			return result;
			
			global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
			    => new()
			    {
					["from"] = from,
					["to"] = to,
				};
		}
		
		global::System.Threading.Tasks.Task global::IMyRpc.DivideAsync(double from, double to, global::System.Threading.CancellationToken cancellationToken)
		{
			if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
			
			this.OnCallingMethod("DivideAsync");
			string rpcMethodName = this.transformedDivideAsync3 ??= this.TransformMethodName("DivideRenamed", typeof(global::IMyRpc));
			global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
			    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), DivideAsyncNamedArgumentDeclaredTypes3, cancellationToken) :
			    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [from, to], DivideAsyncPositionalArgumentDeclaredTypes3, cancellationToken);
			this.OnCalledMethod("DivideAsync");
			
			return result;
			
			global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
			    => new()
			    {
					["from"] = from,
					["to"] = to,
				};
		}
	}
}
