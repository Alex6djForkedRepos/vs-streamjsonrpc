// <auto-generated/>

#nullable enable
#pragma warning disable CS0436 // prefer local types to imported ones

[global::StreamJsonRpc.Reflection.JsonRpcProxyMappingAttribute(typeof(StreamJsonRpc.Generated.IHaveNestedTypes_Proxy))]
partial interface IHaveNestedTypes
{
}

namespace StreamJsonRpc.Generated
{
	
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("StreamJsonRpc.Analyzers", "x.x.x.x")]
	internal class IHaveNestedTypes_Proxy : global::StreamJsonRpc.Reflection.ProxyBase
		, global::IHaveNestedTypes
	{
		
		private static readonly global::System.Collections.Generic.IReadOnlyDictionary<string, global::System.Type> DoSomethingAsyncNamedArgumentDeclaredTypes1 = new global::System.Collections.Generic.Dictionary<string, global::System.Type>
		{
		};
		
		private static readonly global::System.Collections.Generic.IReadOnlyList<global::System.Type> DoSomethingAsyncPositionalArgumentDeclaredTypes1 = new global::System.Collections.Generic.List<global::System.Type>
		{
		};
		
		private string? transformedDoSomethingAsync1;
		
		public IHaveNestedTypes_Proxy(global::StreamJsonRpc.JsonRpc client, global::StreamJsonRpc.Reflection.ProxyInputs inputs)
		    : base(client, inputs)
		{
		}
		
		global::System.Threading.Tasks.Task global::IHaveNestedTypes.DoSomethingAsync()
		{
			if (this.IsDisposed) throw new global::System.ObjectDisposedException(this.GetType().FullName);
			
			this.OnCallingMethod("DoSomethingAsync");
			string rpcMethodName = this.transformedDoSomethingAsync1 ??= this.TransformMethodName("DoSomethingAsync", typeof(global::IHaveNestedTypes));
			global::System.Threading.Tasks.Task result = this.Options.ServerRequiresNamedArguments ?
			    this.JsonRpc.InvokeWithParameterObjectAsync(rpcMethodName, ConstructNamedArgs(), DoSomethingAsyncNamedArgumentDeclaredTypes1, default) :
			    this.JsonRpc.InvokeWithCancellationAsync(rpcMethodName, [], DoSomethingAsyncPositionalArgumentDeclaredTypes1, default);
			this.OnCalledMethod("DoSomethingAsync");
			
			return result;
			
			global::System.Collections.Generic.Dictionary<string, object?> ConstructNamedArgs()
			    => new()
			    {
				};
		}
	}
}
